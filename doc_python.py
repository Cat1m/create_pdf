import os
import sys
import datetime
import time
import traceback
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm
from reportlab.lib.enums import TA_LEFT, TA_CENTER
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import (
    BaseDocTemplate, PageTemplate, Frame, Paragraph, Spacer, PageBreak
)
from reportlab.lib import colors

# C·∫•u h√¨nh l·ªçc file
VALID_EXTENSIONS = ['.cs', '.cshtml', '.dart']
EXCLUDED_PATTERNS = [
    '.g.dart', '.freezed.dart', '.mocks.dart', '.config.dart', 'main.dart', 
    '.env', 'appcontroller.cs',
    '.min.js', '.mini.js', '.bundle.js', '.packed.js',  # Minified files
    '.designer.cs', '.generated.cs', '.g.cs',  # Generated C# files
    'jquery', 'bootstrap', 'popper', 'Program.cs', 'BHYTController.cs', 'enum.cs' # Common libraries
]
EXCLUDED_DIRS = [
    'build', '.dart_tool', 'android', 'ios', 'web', 'windows', 'macos', 'linux', 
    'node_modules', 'bin', 'obj', '.git', '.vscode', '.idea', 'generated', 'gen',
    'wwwroot', 'vendor', 'vendors', 'vendor_plugins', 'lib', 'libs', 'libraries',  # Library folders
    'packages', 'bower_components', 'dist', 'public', 'static',  # Build/dist folders
    'migrations', 'logs', 'temp', 'tmp', 'cache', 'Firebase' , 'VietinBank', 'VNPTSmartCA', 'eSignCloud', 'BIDV', 'BHXH','.config', '.vscode' # Temp folders
]
# Th∆∞ m·ª•c ∆∞u ti√™n (ch·ªâ scan trong n√†y n·∫øu ng∆∞·ªùi d√πng ch·ªçn)
PRIORITY_DIRS = ['src', 'app', 'source', 'lib', 'components', 'controllers', 'models', 'views', 'services', 'api']
MAX_LINES_PER_FILE = 10000
MAX_FILES_TO_PROCESS = 500  # Gi·ªõi h·∫°n s·ªë file t·ªëi ƒëa
PAGES_PER_SECTION = 25  # S·ªë trang m·ªói ph·∫ßn (ƒë·∫ßu, gi·ªØa, cu·ªëi)

# M√†u s·∫Øc cho console output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def log_info(message, indent=0):
    """Log th√¥ng tin th∆∞·ªùng"""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    prefix = "  " * indent
    print(f"{Colors.OKCYAN}[{timestamp}]{Colors.ENDC} {prefix}‚ÑπÔ∏è  {message}")

def log_success(message, indent=0):
    """Log th√†nh c√¥ng"""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    prefix = "  " * indent
    print(f"{Colors.OKGREEN}[{timestamp}]{Colors.ENDC} {prefix}‚úÖ {message}")

def log_warning(message, indent=0):
    """Log c·∫£nh b√°o"""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    prefix = "  " * indent
    print(f"{Colors.WARNING}[{timestamp}]{Colors.ENDC} {prefix}‚ö†Ô∏è  {message}")

def log_error(message, indent=0):
    """Log l·ªói"""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    prefix = "  " * indent
    print(f"{Colors.FAIL}[{timestamp}]{Colors.ENDC} {prefix}‚ùå {message}")

def log_progress(current, total, message=""):
    """Hi·ªÉn th·ªã progress bar"""
    percent = (current / total) * 100 if total > 0 else 0
    bar_length = 40
    filled_length = int(bar_length * current // total) if total > 0 else 0
    bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
    
    sys.stdout.write(f'\r{Colors.OKBLUE}Progress:{Colors.ENDC} |{bar}| {percent:.1f}% ({current}/{total}) {message}')
    sys.stdout.flush()
    
    if current == total:
        print()  # Xu·ªëng d√≤ng khi ho√†n th√†nh

def log_section(title):
    """Log ph·∫ßn m·ªõi v·ªõi ƒë∆∞·ªùng k·∫ª"""
    print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
    print(f"{Colors.HEADER}{title.center(60)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")

def register_fonts():
    """ƒêƒÉng k√Ω font Times New Roman cho ti·∫øng Vi·ªát"""
    log_info("B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω fonts...")
    start_time = time.time()
    
    try:
        font_dir = os.path.join(os.path.dirname(__file__), 'fonts')
        log_info(f"Th∆∞ m·ª•c font: {font_dir}", 1)
        
        if not os.path.exists(font_dir):
            log_warning(f"Th∆∞ m·ª•c font kh√¥ng t·ªìn t·∫°i: {font_dir}", 1)
            log_info("S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh Helvetica", 1)
            return 'Helvetica'
        
        # Ki·ªÉm tra c√°c file font
        font_files = {
            'times.ttf': 'TimesNewRoman',
            'timesbd.ttf': 'TimesNewRoman-Bold',
            'timesi.ttf': 'TimesNewRoman-Italic',
            'timesbi.ttf': 'TimesNewRoman-BoldItalic'
        }
        
        for font_file, font_name in font_files.items():
            font_path = os.path.join(font_dir, font_file)
            if os.path.exists(font_path):
                log_info(f"ƒêang load: {font_file}", 2)
                pdfmetrics.registerFont(TTFont(font_name, font_path))
            else:
                log_warning(f"Kh√¥ng t√¨m th·∫•y: {font_file}", 2)
        
        # ƒêƒÉng k√Ω font family
        from reportlab.pdfbase.pdfmetrics import registerFontFamily
        registerFontFamily('TimesNewRoman',
                          normal='TimesNewRoman',
                          bold='TimesNewRoman-Bold',
                          italic='TimesNewRoman-Italic',
                          boldItalic='TimesNewRoman-BoldItalic')
        
        elapsed = time.time() - start_time
        log_success(f"ƒê√£ load font Times New Roman th√†nh c√¥ng ({elapsed:.2f}s)")
        return 'TimesNewRoman'
        
    except Exception as e:
        log_error(f"Kh√¥ng th·ªÉ load font Times New Roman: {e}")
        log_info("S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh Helvetica")
        return 'Helvetica'


def draw_footer(canvas, doc, page_mapping, total_pages, fontName, is_shortened=False):
    """V·∫Ω footer v·ªõi s·ªë trang"""
    current_page = canvas.getPageNumber()
    
    if is_shortened and page_mapping:
        original_page = page_mapping.get(current_page, current_page)
    else:
        original_page = current_page
    
    canvas.setFont(fontName, 10)
    canvas.setFillColor(colors.black)
    canvas.drawRightString(A4[0] - 15 * mm, 15 * mm, f"{original_page}/{total_pages}")


def get_all_code_files(directory):
    log_info("B·∫Øt ƒë·∫ßu t√¨m ki·∫øm file code...")
    start_time = time.time()
    
    # Ki·ªÉm tra xem c√≥ th∆∞ m·ª•c ∆∞u ti√™n n√†o t·ªìn t·∫°i kh√¥ng
    existing_priority_dirs = []
    for priority_dir in PRIORITY_DIRS:
        check_path = os.path.join(directory, priority_dir)
        if os.path.exists(check_path):
            existing_priority_dirs.append(priority_dir)
    
    if existing_priority_dirs:
        log_info(f"T√¨m th·∫•y c√°c th∆∞ m·ª•c ∆∞u ti√™n: {', '.join(existing_priority_dirs)}")
        response = input("\nüéØ B·∫°n c√≥ mu·ªën CH·ªà scan trong c√°c th∆∞ m·ª•c n√†y? (y/n): ").strip().lower()
        if response == 'y':
            scan_dirs = [os.path.join(directory, d) for d in existing_priority_dirs]
            log_info(f"Ch·ªâ scan trong: {', '.join(existing_priority_dirs)}")
        else:
            scan_dirs = [directory]
            log_info("Scan to√†n b·ªô project")
    else:
        scan_dirs = [directory]
    
    code_files = []
    total_scanned = 0
    excluded_count = 0
    
    for scan_dir in scan_dirs:
        for root, dirs, files in os.walk(scan_dir):
            # Log th∆∞ m·ª•c ƒëang scan
            rel_root = os.path.relpath(root, directory)
            if rel_root != '.' and len(code_files) < 50:  # Ch·ªâ log 50 th∆∞ m·ª•c ƒë·∫ßu
                log_info(f"Scanning: {rel_root}", 1)
            
            # L·ªçc th∆∞ m·ª•c
            original_dirs = dirs[:]
            dirs[:] = [d for d in dirs if not any(e.lower() in d.lower() for e in EXCLUDED_DIRS)]
            excluded_dirs = len(original_dirs) - len(dirs)
            if excluded_dirs > 0 and len(code_files) < 50:
                log_info(f"B·ªè qua {excluded_dirs} th∆∞ m·ª•c b·ªã lo·∫°i tr·ª´", 2)
            
            for file in files:
                total_scanned += 1
                ext = os.path.splitext(file)[1].lower()
                
                if ext in VALID_EXTENSIONS:
                    path = os.path.join(root, file)
                    
                    # Ki·ªÉm tra exclusion patterns
                    if any(p.lower() in path.lower() for p in EXCLUDED_DIRS):
                        excluded_count += 1
                        continue
                        
                    if any(p.lower() in file.lower() for p in EXCLUDED_PATTERNS):
                        excluded_count += 1
                        if len(code_files) < 50:  # Ch·ªâ log 50 file ƒë·∫ßu
                            log_info(f"B·ªè qua (pattern): {file}", 3)
                        continue
                    
                    try:
                        file_size = os.path.getsize(path)
                        if file_size < 5 * 1024 * 1024:  # < 5MB
                            code_files.append(path)
                            if len(code_files) <= 20:  # Ch·ªâ log chi ti·∫øt 20 file ƒë·∫ßu
                                log_info(f"‚úì {file} ({file_size/1024:.1f} KB)", 3)
                            
                            # Ki·ªÉm tra gi·ªõi h·∫°n s·ªë file
                            if len(code_files) >= MAX_FILES_TO_PROCESS:
                                log_warning(f"‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n {MAX_FILES_TO_PROCESS} files!")
                                log_warning("D·ª´ng t√¨m ki·∫øm ƒë·ªÉ tr√°nh x·ª≠ l√Ω qu√° l√¢u")
                                break
                        else:
                            if len(code_files) < 20:
                                log_warning(f"File qu√° l·ªõn (>5MB): {file}", 3)
                            excluded_count += 1
                    except Exception as e:
                        if len(code_files) < 20:
                            log_error(f"L·ªói khi ki·ªÉm tra file {file}: {e}", 3)
                        excluded_count += 1
            
            # Break n·∫øu ƒë√£ ƒë·ªß file
            if len(code_files) >= MAX_FILES_TO_PROCESS:
                break
    
    elapsed = time.time() - start_time
    log_success(f"Ho√†n th√†nh t√¨m ki·∫øm ({elapsed:.2f}s)")
    log_info(f"T·ªïng file ƒë√£ qu√©t: {total_scanned}")
    log_info(f"File code h·ª£p l·ªá: {len(code_files)}")
    log_info(f"File b·ªã lo·∫°i tr·ª´: {excluded_count}")
    
    # C·∫£nh b√°o n·∫øu c√≥ qu√° nhi·ªÅu file
    if len(code_files) > 100:
        log_warning(f"‚ö†Ô∏è C√≥ {len(code_files)} files - PDF s·∫Ω r·∫•t l·ªõn!")
        log_warning("N√™n ch·ªâ ch·ªçn c√°c file quan tr·ªçng nh·∫•t")
        
        # ƒê·ªÅ xu·∫•t l·ªçc theo folder c·∫•p 1
        folders = {}
        for file in code_files:
            rel_path = os.path.relpath(file, directory)
            parts = rel_path.split(os.sep)
            if len(parts) > 1:
                folder = parts[0]
            else:
                folder = "root"
            
            if folder not in folders:
                folders[folder] = []
            folders[folder].append(file)
        
        log_info("\nüìä Ph√¢n b·ªë file theo th∆∞ m·ª•c:")
        for folder, files in sorted(folders.items(), key=lambda x: len(x[1]), reverse=True)[:10]:
            log_info(f"  ‚Ä¢ {folder}: {len(files)} files", 1)
        
        response = input("\nü§î B·∫°n c√≥ mu·ªën l·ªçc b·ªõt files? (y/n): ").strip().lower()
        if response == 'y':
            log_info("\nT√πy ch·ªçn l·ªçc:")
            log_info("1. Ch·ªâ l·∫•y files trong th∆∞ m·ª•c c·ª• th·ªÉ")
            log_info("2. Lo·∫°i tr·ª´ th∆∞ m·ª•c c·ª• th·ªÉ") 
            log_info("3. Gi·ªõi h·∫°n s·ªë file")
            log_info("4. Gi·ªØ nguy√™n")
            
            choice = input("\nL·ª±a ch·ªçn (1/2/3/4): ").strip()
            
            if choice == '1':
                log_info("C√°c th∆∞ m·ª•c c√≥ s·∫µn:")
                for i, folder in enumerate(sorted(folders.keys())[:20], 1):
                    log_info(f"  {i}. {folder} ({len(folders[folder])} files)")
                
                selected = input("\nNh·∫≠p s·ªë th∆∞ m·ª•c mu·ªën gi·ªØ (c√°ch nhau b·ªüi d·∫•u ph·∫©y): ").strip()
                selected_indices = [int(x.strip()) - 1 for x in selected.split(',')]
                folder_names = sorted(folders.keys())
                
                filtered_files = []
                for idx in selected_indices:
                    if 0 <= idx < len(folder_names):
                        filtered_files.extend(folders[folder_names[idx]])
                
                code_files = filtered_files[:MAX_FILES_TO_PROCESS]
                log_info(f"ƒê√£ l·ªçc c√≤n {len(code_files)} files")
                
            elif choice == '2':
                exclude = input("Nh·∫≠p t√™n th∆∞ m·ª•c mu·ªën lo·∫°i tr·ª´ (c√°ch nhau b·ªüi d·∫•u ph·∫©y): ").strip()
                exclude_folders = [x.strip() for x in exclude.split(',')]
                
                filtered_files = []
                for file in code_files:
                    rel_path = os.path.relpath(file, directory)
                    parts = rel_path.split(os.sep)
                    folder = parts[0] if len(parts) > 1 else "root"
                    
                    if folder not in exclude_folders:
                        filtered_files.append(file)
                
                code_files = filtered_files[:MAX_FILES_TO_PROCESS]
                log_info(f"ƒê√£ l·ªçc c√≤n {len(code_files)} files")
                
            elif choice == '3':
                n = int(input("Nh·∫≠p s·ªë file t·ªëi ƒëa (khuy·∫øn ngh·ªã < 100): ").strip())
                code_files = code_files[:n]
                log_info(f"ƒê√£ gi·ªõi h·∫°n xu·ªëng {len(code_files)} files")
    
    return code_files


def build_story_element(path, directory, fontName, styles, file_index=None, total_files=None):
    """T·∫°o story elements cho m·ªôt file"""
    code_style = styles['code_style']
    file_heading_style = styles['file_heading_style']
    info_style = styles['info_style']
    
    elements = []
    rel_path = os.path.relpath(path, directory)
    
    # Log processing
    if file_index is not None and total_files is not None:
        log_info(f"[{file_index}/{total_files}] Processing: {rel_path}")
    
    elements.append(Paragraph(f"üìÑ {rel_path}", file_heading_style))

    try:
        start_time = time.time()
        with open(path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
        
        log_info(f"  ƒê·ªçc {len(lines)} d√≤ng ({time.time() - start_time:.2f}s)", 1)
        
    except Exception as e:
        log_error(f"  Kh√¥ng th·ªÉ ƒë·ªçc file: {e}", 1)
        elements.append(Paragraph("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file n√†y", code_style))
        return elements

    if len(lines) > MAX_LINES_PER_FILE:
        lines = lines[:MAX_LINES_PER_FILE]
        log_warning(f"  File b·ªã c·∫Øt ng·∫Øn, ch·ªâ l·∫•y {MAX_LINES_PER_FILE} d√≤ng ƒë·∫ßu", 1)
        elements.append(Paragraph(f"‚ö†Ô∏è File b·ªã c·∫Øt ng·∫Øn, ch·ªâ hi·ªÉn th·ªã {MAX_LINES_PER_FILE} d√≤ng ƒë·∫ßu", info_style))

    batch_size = 20
    total_batches = (len(lines) + batch_size - 1) // batch_size
    
    for batch_num, start in enumerate(range(0, len(lines), batch_size), 1):
        if batch_num % 10 == 0:  # Log m·ªói 10 batch
            log_info(f"  Processing batch {batch_num}/{total_batches}", 2)
        
        batch = lines[start:start + batch_size]
        content = ""
        
        for idx, line in enumerate(batch, start=start + 1):
            clean = line.rstrip().replace('\x00', '').replace('\ufffd', '?')
            clean = clean.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            clean = clean.replace('"', '&quot;').replace("'", '&apos;')
            content += f"{idx:03} | {clean}<br/>"
        
        if content:
            try:
                elements.append(Paragraph(content, code_style))
            except Exception as e:
                log_warning(f"  L·ªói render batch {batch_num}: {e}", 2)
                simple_content = f"[N·ªôi dung file c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát - d√≤ng {start+1} ƒë·∫øn {min(start+batch_size, len(lines))}]"
                elements.append(Paragraph(simple_content, code_style))
    
    log_success(f"  ‚úì Ho√†n th√†nh x·ª≠ l√Ω file", 1)
    return elements


def build_story(directory, code_files, fontName, file_indices=None):
    """Build story cho PDF"""
    log_info("B·∫Øt ƒë·∫ßu build story...")
    start_time = time.time()
    
    styles = getSampleStyleSheet()

    # Define c√°c styles
    custom_styles = {
        'file_heading_style': ParagraphStyle('FileHeading', 
                                            parent=styles['Heading2'], 
                                            fontName=fontName, 
                                            fontSize=14, 
                                            alignment=TA_LEFT, 
                                            spaceAfter=8, 
                                            spaceBefore=12),
        
        'code_style': ParagraphStyle('Code', 
                                   parent=styles['Normal'], 
                                   fontName=fontName, 
                                   fontSize=12, 
                                   alignment=TA_LEFT, 
                                   spaceAfter=5, 
                                   spaceBefore=0, 
                                   leading=13),
        
        'info_style': ParagraphStyle('Info', 
                                   parent=styles['Normal'], 
                                   fontName=fontName, 
                                   fontSize=11, 
                                   alignment=TA_LEFT, 
                                   spaceAfter=10)
    }

    story = []
    
    # N·ªôi dung c√°c files
    files_to_process = file_indices if file_indices is not None else range(len(code_files))
    total_files = len(files_to_process)
    
    log_info(f"S·∫Ω x·ª≠ l√Ω {total_files} files")
    
    for idx, file_idx in enumerate(files_to_process, 1):
        if file_idx < len(code_files):
            try:
                elements = build_story_element(
                    code_files[file_idx], 
                    directory, 
                    fontName, 
                    custom_styles,
                    file_index=idx,
                    total_files=total_files
                )
                story.extend(elements)
                
                # Th√™m PageBreak n·∫øu kh√¥ng ph·∫£i file cu·ªëi
                if idx < total_files:
                    story.append(PageBreak())
                
                # Update progress
                log_progress(idx, total_files, f"Files processed")
                
            except Exception as e:
                log_error(f"L·ªói x·ª≠ l√Ω file {code_files[file_idx]}: {e}")
                log_error(f"Traceback: {traceback.format_exc()}", 1)
                # Ti·∫øp t·ª•c v·ªõi file ti·∫øp theo
                continue
    
    elapsed = time.time() - start_time
    log_success(f"Ho√†n th√†nh build story ({elapsed:.2f}s)")
    return story


def count_pages_per_file(directory, code_files, fontName):
    """ƒê·∫øm s·ªë trang cho m·ªói file"""
    log_section("PH√ÇN T√çCH C·∫§U TR√öC FILE")
    log_info("ƒêang ph√¢n t√≠ch s·ªë trang cho t·ª´ng file...")
    
    pages_info = []
    current_page = 1
    total_files = len(code_files)
    
    for i, path in enumerate(code_files, 1):
        try:
            rel_path = os.path.relpath(path, directory)
            log_info(f"[{i}/{total_files}] Analyzing: {rel_path}")
            
            # T·∫°o story cho file n√†y
            story = build_story(directory, [path], fontName, file_indices=[0])
            
            # ƒê·∫øm s·ªë trang
            dummy_buf = BytesIO()
            dummy_doc = BaseDocTemplate(
                dummy_buf, 
                pagesize=A4,
                leftMargin=15 * mm,
                rightMargin=15 * mm,
                topMargin=25 * mm,
                bottomMargin=25 * mm
            )
            
            frame = Frame(
                dummy_doc.leftMargin, 
                dummy_doc.bottomMargin + 20 * mm,
                dummy_doc.width, 
                dummy_doc.height - 20 * mm, 
                id='normal'
            )
            
            page_count_holder = {'count': 0}
            
            class SingleFilePageCounter(canvas.Canvas):
                def showPage(self):
                    page_count_holder['count'] += 1
                    super().showPage()
            
            dummy_doc.addPageTemplates([PageTemplate(id='dummy', frames=frame)])
            
            dummy_doc.build(story, canvasmaker=SingleFilePageCounter)
            file_pages = page_count_holder['count']
            
            pages_info.append({
                'file_index': i - 1,
                'file_path': path,
                'start_page': current_page,
                'end_page': current_page + file_pages - 1,
                'page_count': file_pages
            })
            
            log_info(f"  ‚Üí {file_pages} trang (trang {current_page}-{current_page + file_pages - 1})", 1)
            
            current_page += file_pages
            dummy_buf.close()
            
            # Update progress
            log_progress(i, total_files, "Files analyzed")
            
        except Exception as e:
            log_error(f"L·ªói ph√¢n t√≠ch file {path}: {e}")
            pages_info.append({
                'file_index': i - 1,
                'file_path': path,
                'start_page': current_page,
                'end_page': current_page,
                'page_count': 1
            })
            current_page += 1
    
    log_success(f"Ho√†n th√†nh ph√¢n t√≠ch: T·ªïng {current_page - 1} trang")
    return pages_info


def select_files_for_shortened(pages_info, total_pages, pages_per_section=25):
    """Ch·ªçn c√°c file c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o shortened version"""
    log_section("CH·ªåN FILE CHO SHORTENED VERSION")
    
    selected_files = set()
    page_mapping = {}
    
    if total_pages <= pages_per_section * 3:
        log_info(f"File g·ªëc ch·ªâ c√≥ {total_pages} trang (‚â§ {pages_per_section * 3})")
        log_info("‚Üí Kh√¥ng c·∫ßn t·∫°o shortened version")
        for info in pages_info:
            selected_files.add(info['file_index'])
        return list(selected_files), None
    
    # T√≠nh c√°c trang c·∫ßn l·∫•y
    first_pages = list(range(1, pages_per_section + 1))
    middle_start = (total_pages - pages_per_section) // 2 + 1
    middle_pages = list(range(middle_start, middle_start + pages_per_section))
    last_pages = list(range(total_pages - pages_per_section + 1, total_pages + 1))
    
    needed_pages = set(first_pages + middle_pages + last_pages)
    
    log_info(f"Trang c·∫ßn gi·ªØ l·∫°i:")
    log_info(f"  ‚Ä¢ ƒê·∫ßu: 1-{pages_per_section}", 1)
    log_info(f"  ‚Ä¢ Gi·ªØa: {middle_start}-{middle_start + pages_per_section - 1}", 1)
    log_info(f"  ‚Ä¢ Cu·ªëi: {total_pages - pages_per_section + 1}-{total_pages}", 1)
    
    # T√¨m files ch·ª©a c√°c trang c·∫ßn thi·∫øt
    shortened_page_num = 1
    
    for info in pages_info:
        file_pages = set(range(info['start_page'], info['end_page'] + 1))
        if file_pages.intersection(needed_pages):
            selected_files.add(info['file_index'])
            log_info(f"‚úì Ch·ªçn file: {os.path.basename(info['file_path'])}")
            
            # T·∫°o mapping
            for page in range(info['start_page'], info['end_page'] + 1):
                if page in needed_pages:
                    page_mapping[shortened_page_num] = page
                    shortened_page_num += 1
    
    log_success(f"ƒê√£ ch·ªçn {len(selected_files)}/{len(pages_info)} files")
    log_info(f"Shortened version s·∫Ω c√≥ ~{len(needed_pages)} trang")
    
    return sorted(list(selected_files)), page_mapping


def create_pdf_document(output_path, directory, code_files, is_shortened=False, 
                       file_indices=None, page_mapping=None, total_pages_original=None):
    """T·∫°o PDF document"""
    version_name = "SHORTENED" if is_shortened else "FULL"
    log_section(f"T·∫†O {version_name} PDF")
    
    fontName = register_fonts()
    
    def create_story():
        return build_story(directory, code_files, fontName, file_indices)
    
    # L·∫ßn 1: ƒê·∫øm s·ªë trang
    log_info("B∆∞·ªõc 1: T√≠nh to√°n s·ªë trang...")
    start_time = time.time()
    
    log_info("  ƒêang t·∫°o story cho vi·ªác ƒë·∫øm trang...")
    story_for_counting = create_story()
    log_info(f"  Story ƒë√£ t·∫°o v·ªõi {len(story_for_counting)} elements")
    
    total_pages_holder = {}

    class PageCounterCanvas(canvas.Canvas):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self._page_count = 0
        
        def showPage(self):
            self._page_count += 1
            if self._page_count % 100 == 0:
                log_info(f"    ƒêang ƒë·∫øm: {self._page_count} trang...")
            super().showPage()
        
        def save(self):
            total_pages_holder["count"] = self._page_count
            super().save()

    try:
        dummy_buf = BytesIO()
        dummy_doc = BaseDocTemplate(
            dummy_buf, 
            pagesize=A4,
            leftMargin=15 * mm,
            rightMargin=15 * mm,
            topMargin=25 * mm,
            bottomMargin=25 * mm
        )
        
        frame = Frame(
            dummy_doc.leftMargin, 
            dummy_doc.bottomMargin + 20 * mm,
            dummy_doc.width, 
            dummy_doc.height - 20 * mm, 
            id='normal'
        )
        
        dummy_doc.addPageTemplates([PageTemplate(id='dummy', frames=frame)])
        
        log_info("  B·∫Øt ƒë·∫ßu build dummy document ƒë·ªÉ ƒë·∫øm trang...")
        build_start = time.time()
        dummy_doc.build(story_for_counting, canvasmaker=PageCounterCanvas)
        log_info(f"  Build dummy document xong ({time.time() - build_start:.2f}s)")
        
        if not is_shortened:
            total_pages = total_pages_holder.get("count", 1)
            total_pages_original = total_pages
        else:
            total_pages = total_pages_original
        
        dummy_buf.close()
        
        elapsed = time.time() - start_time
        log_success(f"Ho√†n th√†nh ƒë·∫øm trang ({elapsed:.2f}s)")
        log_info(f"S·ªë trang th·ª±c t·∫ø: {total_pages_holder.get('count', 1)}")
        log_info(f"S·ªë trang hi·ªÉn th·ªã: {total_pages}")
        
        # C·∫£nh b√°o n·∫øu qu√° nhi·ªÅu trang
        if total_pages > 1000:
            log_warning(f"‚ö†Ô∏è PDF s·∫Ω c√≥ {total_pages} trang - R·∫§T L·ªöN!")
            response = input("\nü§î B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n): ").strip().lower()
            if response != 'y':
                log_info("ƒê√£ h·ªßy t·∫°o PDF")
                return None
        
    except Exception as e:
        log_error(f"L·ªói khi ƒë·∫øm s·ªë trang: {e}")
        log_error(f"Traceback: {traceback.format_exc()}")
        raise

    # L·∫ßn 2: Render th·∫≠t
    log_info("B∆∞·ªõc 2: Render PDF...")
    start_time = time.time()
    
    try:
        log_info("  ƒêang t·∫°o l·∫°i story cho render cu·ªëi c√πng...")
        story_for_final = create_story()
        log_info(f"  Story final c√≥ {len(story_for_final)} elements")
        
        final_doc = BaseDocTemplate(
            output_path,
            pagesize=A4,
            leftMargin=15 * mm,
            rightMargin=15 * mm,
            topMargin=25 * mm,
            bottomMargin=25 * mm
        )

        frame_final = Frame(
            final_doc.leftMargin, 
            final_doc.bottomMargin + 20 * mm,
            final_doc.width, 
            final_doc.height - 20 * mm, 
            id='normal'
        )

        def on_page(canvas_obj, doc_obj):
            current = canvas_obj.getPageNumber()
            if current % 100 == 0:
                log_info(f"    ƒêang render: trang {current}/{total_pages}...")
            draw_footer(canvas_obj, doc_obj, page_mapping, total_pages, fontName, is_shortened)

        final_doc.addPageTemplates([
            PageTemplate(id='real', frames=frame_final, onPage=on_page)
        ])
        
        log_info("  B·∫Øt ƒë·∫ßu build PDF final...")
        build_start = time.time()
        final_doc.build(story_for_final)
        log_info(f"  Build PDF final xong ({time.time() - build_start:.2f}s)")
        
        elapsed = time.time() - start_time
        file_size = os.path.getsize(output_path) / (1024 * 1024)  # MB
        
        log_success(f"Ho√†n th√†nh render PDF ({elapsed:.2f}s)")
        log_info(f"File size: {file_size:.2f} MB")
        log_info(f"Output: {output_path}")
        
    except Exception as e:
        log_error(f"L·ªói khi render PDF: {e}")
        log_error(f"Traceback: {traceback.format_exc()}")
        raise
    
    return total_pages


def main():
    log_section("SOURCE CODE TO PDF CONVERTER")
    log_info(f"Start time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Ki·ªÉm tra th∆∞ vi·ªán
    try:
        from reportlab.lib.pagesizes import A4
        log_success("Th∆∞ vi·ªán reportlab ƒë√£ s·∫µn s√†ng")
    except ImportError:
        log_error("Ch∆∞a c√†i ƒë·∫∑t reportlab!")
        log_info("Vui l√≤ng c√†i ƒë·∫∑t: pip install reportlab")
        return

    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n
    directory = input("\nüìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a source code: ").strip()
    
    if not os.path.isdir(directory):
        log_error(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {directory}")
        return
    
    log_success(f"Th∆∞ m·ª•c h·ª£p l·ªá: {directory}")
    
    # Hi·ªÉn th·ªã c·∫•u h√¨nh l·ªçc hi·ªán t·∫°i
    log_info("C·∫•u h√¨nh l·ªçc file:")
    log_info(f"  ‚Ä¢ Extensions h·ª£p l·ªá: {', '.join(VALID_EXTENSIONS)}", 1)
    log_info(f"  ‚Ä¢ Gi·ªõi h·∫°n file: {MAX_FILES_TO_PROCESS}", 1)
    log_info(f"  ‚Ä¢ Gi·ªõi h·∫°n d√≤ng/file: {MAX_LINES_PER_FILE}", 1)
    
    # T√¨m ki·∫øm files
    log_section("T√åM KI·∫æM FILE CODE")
    code_files = get_all_code_files(directory)
    
    if not code_files:
        log_error("Kh√¥ng t√¨m th·∫•y file code n√†o!")
        return
    
    log_success(f"T√¨m th·∫•y {len(code_files)} file code")
    
    # C·∫£nh b√°o n·∫øu v·∫´n c√≤n nhi·ªÅu file
    if len(code_files) > 200:
        log_warning(f"‚ö†Ô∏è C·∫¢NH B√ÅO: {len(code_files)} files l√† R·∫§T NHI·ªÄU!")
        log_warning("PDF c√≥ th·ªÉ m·∫•t r·∫•t l√¢u ƒë·ªÉ t·∫°o v√† c√≥ dung l∆∞·ª£ng l·ªõn")
        log_info("\nB·∫°n c√≥ th·ªÉ:")
        log_info("1. Ti·∫øp t·ª•c v·ªõi t·∫•t c·∫£ files (m·∫•t nhi·ªÅu th·ªùi gian)")
        log_info("2. Ch·ªâ l·∫•y N files ƒë·∫ßu ti√™n")
        log_info("3. H·ªßy v√† l·ªçc l·∫°i th·ªß c√¥ng")
        
        choice = input("\nL·ª±a ch·ªçn (1/2/3): ").strip()
        
        if choice == '2':
            n = int(input("Nh·∫≠p s·ªë file mu·ªën l·∫•y (khuy·∫øn ngh·ªã < 100): ").strip())
            code_files = code_files[:n]
            log_info(f"ƒê√£ gi·ªõi h·∫°n xu·ªëng {len(code_files)} files")
        elif choice == '3':
            log_info("ƒê√£ h·ªßy. Vui l√≤ng l·ªçc l·∫°i files th·ªß c√¥ng")
            return
    
    # Hi·ªÉn th·ªã danh s√°ch file (gi·ªõi h·∫°n 10 file ƒë·∫ßu)
    log_info("Danh s√°ch file (t·ªëi ƒëa 10 file ƒë·∫ßu):")
    for i, file in enumerate(code_files[:10], 1):
        rel_path = os.path.relpath(file, directory)
        file_size = os.path.getsize(file) / 1024  # KB
        log_info(f"  {i:2}. {rel_path} ({file_size:.1f} KB)", 1)
    if len(code_files) > 10:
        log_info(f"  ... v√† {len(code_files) - 10} file kh√°c", 1)
    
    # ∆Ø·ªõc t√≠nh th·ªùi gian
    estimated_time = len(code_files) * 0.5  # ∆Ø·ªõc t√≠nh 0.5s m·ªói file
    log_info(f"\n‚è±Ô∏è  ∆Ø·ªõc t√≠nh th·ªùi gian x·ª≠ l√Ω: {estimated_time/60:.1f} ph√∫t")
    
    response = input("\nüöÄ B·∫Øt ƒë·∫ßu t·∫°o PDF? (y/n): ").strip().lower()
    if response != 'y':
        log_info("ƒê√£ h·ªßy")
        return
    
    try:
        # 1. T·∫°o PDF FULL
        output_path_full = os.path.join(directory, "SourceCode_Full.pdf")
        
        total_pages = create_pdf_document(output_path_full, directory, code_files)
        
        if total_pages is None:
            log_warning("ƒê√£ h·ªßy t·∫°o PDF do file qu√° l·ªõn")
            return
        
        log_section("K·∫æT QU·∫¢ FULL VERSION")
        log_success(f"ƒê√£ l∆∞u: {output_path_full}")
        log_info(f"T·ªïng s·ªë trang: {total_pages}")
        
        # 2. T·∫°o PDF SHORTENED n·∫øu c·∫ßn
        if total_pages > PAGES_PER_SECTION * 3:
            pages_info = count_pages_per_file(directory, code_files, register_fonts())
            selected_files, page_mapping = select_files_for_shortened(
                pages_info, total_pages, PAGES_PER_SECTION
            )
            
            output_path_shortened = os.path.join(directory, "SourceCode_Shortened.pdf")
            
            create_pdf_document(
                output_path_shortened, 
                directory, 
                code_files,
                is_shortened=True,
                file_indices=selected_files,
                page_mapping=page_mapping,
                total_pages_original=total_pages
            )
            
            log_section("K·∫æT QU·∫¢ SHORTENED VERSION")
            log_success(f"ƒê√£ l∆∞u: {output_path_shortened}")
            log_info(f"Gi·ªØ l·∫°i {PAGES_PER_SECTION} trang ƒë·∫ßu, "
                    f"{PAGES_PER_SECTION} trang gi·ªØa, {PAGES_PER_SECTION} trang cu·ªëi")
        else:
            log_section("SHORTENED VERSION")
            log_info(f"File ch·ªâ c√≥ {total_pages} trang (‚â§ {PAGES_PER_SECTION * 3} trang)")
            log_info("‚Üí Kh√¥ng c·∫ßn t·∫°o shortened version")
        
        # T·ªïng k·∫øt
        log_section("HO√ÄN TH√ÄNH")
        log_success("‚ú® Font: Times New Roman (h·ªó tr·ª£ ti·∫øng Vi·ªát)")
        log_success("üìñ Footer: S·ªë trang ·ªü g√≥c ph·∫£i")
        log_info(f"End time: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        log_warning("\n\n‚ö†Ô∏è  Ng∆∞·ªùi d√πng ƒë√£ d·ª´ng ch∆∞∆°ng tr√¨nh (Ctrl+C)")
        log_info("ƒêang d·ªçn d·∫πp...")
        sys.exit(1)
        
    except Exception as e:
        log_error(f"\n\nüí• L·ªói nghi√™m tr·ªçng: {str(e)}")
        log_error("Traceback ƒë·∫ßy ƒë·ªß:")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  Ch∆∞∆°ng tr√¨nh b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng{Colors.ENDC}")
    except Exception as e:
        print(f"\n{Colors.FAIL}üí• L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: {e}{Colors.ENDC}")
        traceback.print_exc()